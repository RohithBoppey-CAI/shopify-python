{% comment %}
Final Production-Ready Version:
- Flexbox grid provides a responsive layout compatible with all themes.
- Debug panel and Schema are fully enabled.
- Black list-item dots have been removed via CSS.
{% endcomment %}

<div class="couture-search-section page-width" id="couture-container-{{ section.id }}"
	data-section-id="{{ section.id }}" data-api-base-url="{{ block.settings.api_base_url }}"
	data-user-selector="{{ block.settings.user_product_selector }}" data-debug-mode="{{ block.settings.debug_mode }}">
	{% if block.settings.debug_mode %}
	<div class="couture-debug-panel"
		style="background: #f0f8ff; border: 1px solid #ccc; padding: 15px; margin: 10px 0; font-family: monospace; font-size: 12px;">
		<strong>Debug Information:</strong>
		<p><strong>API Base URL:</strong> {{ block.settings.api_base_url }}</p>
		<p><strong>User Product Selector:</strong> {{ block.settings.user_product_selector | default: 'Using default' }}
		</p>
		<div id="debug-log-{{ section.id }}"></div>
	</div>
	{% endif %}

	<div class="couture-results-grid" id="couture-results-grid-{{ section.id }}">
		<p>Searching...</p>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', async function () {
		const container = document.getElementById('couture-container-{{ section.id }}');
		if (!container) return;

		// --- Configuration ---
		const sectionId = container.dataset.sectionId;
		const apiBaseUrl = container.dataset.apiBaseUrl;
		const userProductSelector = container.dataset.userSelector || '.product-grid__item';
		const debugMode = container.dataset.debugMode === 'true';
		const resultsContainer = document.getElementById('couture-results-grid-' + sectionId);

		// --- Helper Functions ---
		function debugLog(message, data = null) {
			if (!debugMode) return;
			const debugPanel = document.getElementById('debug-log-' + sectionId);
			if (debugPanel) {
				const logEntry = document.createElement('div');
				logEntry.style.marginTop = '5px';
				logEntry.innerHTML = `<strong>${new Date().toLocaleTimeString()}:</strong> ${message}${data ? `<pre style="white-space: pre-wrap; word-break: break-all;">${JSON.stringify(data, null, 2)}</pre>` : ''}`;
				debugPanel.appendChild(logEntry);
			}
		}
		function showErrorMessage(errorMessage) {
			debugLog('FATAL ERROR:', { message: errorMessage });
			if (resultsContainer) {
				resultsContainer.innerHTML = `<p style="color: red; padding: 20px;"><strong>Error:</strong> ${errorMessage}</p>`;
			}
		}

		// --- Core Logic Functions ---
		async function getCardTemplate() {
			debugLog('Fetching card template from /collections/all');
			try {
				const response = await fetch('/collections/all');
				if (!response.ok) throw new Error('Could not fetch collection page.');
				const html = await response.text();
				const doc = new DOMParser().parseFromString(html, 'text/html');
				const cardElement = doc.querySelector(userProductSelector);
				if (!cardElement) throw new Error(`Could not find a card with selector "${userProductSelector}" on the collection page.`);
				cardElement.removeAttribute('class'); // Strip all original classes
				return cardElement.cloneNode(true);
			} catch (error) {
				throw new Error(`Template fetching failed: ${error.message}`);
			}
		}
		async function getProductsData(handles) {
			debugLog('Fetching product data for handles', handles);
			const requests = handles.map(handle => fetch(`/products/${handle}.js`).then(res => {
				if (!res.ok) throw new Error(`404 Not Found for product handle: "${handle}"`);
				return res.json();
			}));
			return await Promise.all(requests);
		}

		// --- MAIN EXECUTION ---
		try {
			const urlParams = new URLSearchParams(window.location.search);
			const searchTerm = urlParams.get('q');

			if (!apiBaseUrl || !apiBaseUrl.startsWith('http')) {
				throw new Error('API Base URL is not configured correctly.');
			}
			if (!searchTerm) {
				resultsContainer.innerHTML = '<p>Please enter a search term.</p>';
				return;
			}

			debugLog('Starting execution for term:', searchTerm);
			const handleResponse = await fetch(`${apiBaseUrl}?query=${encodeURIComponent(searchTerm)}`, { headers: { 'ngrok-skip-browser-warning': 'true' } });
			const handleData = await handleResponse.json();
			const productHandles = handleData.product_handles;

			if (!productHandles || productHandles.length === 0) {
				resultsContainer.innerHTML = `<p>No results found for "${searchTerm}".</p>`;
				return;
			}

			const [cardTemplate, productsData] = await Promise.all([
				getCardTemplate(),
				getProductsData(productHandles)
			]);

			resultsContainer.innerHTML = '';
			const productGrid = document.createElement('div');
			productGrid.className = 'couture-flex-grid';

			productsData.forEach(product => {
                const card = cardTemplate.cloneNode(true);
                card.classList.add('couture-flex-item');

                const link = card.querySelector('a');
                const image = card.querySelector('img');


                const titleElements = card.querySelectorAll('.text-block:not(product-price), .h4, .card__heading, .product-card__title, .card-information__text');
                
                const priceElements = card.querySelectorAll('.price');

                if (link) {
                    link.href = product.url;
                }

                if (image) {
                    image.src = product.featured_image + '&width=550';
                    image.srcset = '';
                    image.loading = 'lazy';
                    image.alt = product.title;
                }

                if (titleElements.length > 0) {
                    titleElements.forEach(el => el.innerHTML = product.title);
                }

                if (priceElements.length > 0) {
                    const formattedPrice = new Intl.NumberFormat(undefined, { style: 'currency', currency: '{{ cart.currency.iso_code }}' }).format(product.price / 100);
                    priceElements.forEach(el => el.innerHTML = formattedPrice);
                }

                productGrid.appendChild(card);
            });

			resultsContainer.appendChild(productGrid);
			debugLog('Render process completed successfully.');
		} catch (error) {
			showErrorMessage(error.message);
		}
	});
</script>

{% schema %}
{
  "name": "Couture Search Results",
  "target": "section",
  "settings": [
    {
      "type": "header",
      "content": "API Configuration"
    },
    {
      "type": "text",
      "id": "api_base_url",
      "label": "Search API Base URL"
    },
    {
      "type": "header",
      "content": "Appearance (Advanced)"
    },
    {
      "type": "text",
      "id": "user_product_selector",
      "label": "Product Card CSS Selector (Optional)",
      "info": "Example: '.product-grid__item'. Leave blank to use a common default.",
      "placeholder": ".product-grid__item"
    },
    {
      "type": "header",
      "content": "Debugging"
    },
    {
      "type": "checkbox",
      "id": "debug_mode",
      "label": "Enable Debug Mode",
      "default": false
    }
  ]
}
{% endschema %}

<style>
	/* --- The Flexbox Grid Solution --- */

	/* 1. The Flex Container */
	.couture-flex-grid {
		display: flex;
		flex-wrap: wrap;
		margin: 0 -10px;
		/* ADDED: Remove list dots and padding */
		padding: 0;
		list-style: none;
	}

	/* 2. The Flex Items (Product Cards) */
	.couture-flex-item {
		box-sizing: border-box;
		padding: 0 10px;
		margin-bottom: 30px;
		list-style: none;
		flex-basis: 50%;
		/* Mobile: 2 columns */
	}

	/* Tablet and up: 4 columns */
	@media screen and (min-width: 750px) {
		.couture-flex-item {
			flex-basis: 25%;
		}
	}

	/* Wide desktops: 5 columns */
	@media screen and (min-width: 1200px) {
		.couture-flex-item {
			flex-basis: 20%;
		}
	}

	/* 3. Image Styles */
	.couture-flex-item img {
		width: 100%;
		height: auto;
		aspect-ratio: 4 / 5;
		object-fit: cover;
		display: block;
		margin-bottom: 10px;
	}
</style>